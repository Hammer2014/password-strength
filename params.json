{
  "name": "Password Strength Tester",
  "tagline": "Calculates the entropy of a password",
  "body": "Password Strength Tester\r\n========================\r\n\r\n[![Build Status](https://travis-ci.org/tests-always-included/password-strength.svg?branch=master)](https://travis-ci.org/tests-always-included/password-strength)\r\n\r\nPassword Strength is a library that calculates the relative strength of a password.  This is accomplished by using several techniques.  Primarily this relies on letter trigraphs, which check each set of 3 characters in a given password.  More information on the trigraph calculations [is available](data/README.md).  This also calculates the entropy bits based on Claude Shannon's technique on determining the number of bits required to represent a set of characters and multiplying it by the length of the password.  There is also a check to see if a password is contained in a list of common passwords.\r\n\r\n\r\nUsage\r\n-----\r\n\r\nThe Password Strength library is wrapped with [fid-umd], and is usable in a variety of systems.  When you use the `.check()` method for the password \"abcd1234\", the results may look like what you see below.  Comments are added to explain the fields.\r\n\r\n    {\r\n        charsetSize: 36,  // Explained better below\r\n        commonPassword: true,  // If true, don't use this password!\r\n        passwordLength: 8,  // Same as string.length\r\n        shannonEntropyBits: 24,  // Claude Shannon's method\r\n        strengthCode: 'WEAK',  // Our ranking of the password's strength\r\n        trigraphEntropyBits: 39.71755017780513,  // Based on trigraphs\r\n        charsets: {\r\n            number: true,  // Contains 0-9\r\n            lower: true,  // Contains a-z\r\n            upper: false,  // Contains A-Z\r\n            punctuation: false,  // Contains common sentence punctuation\r\n            symbol: false,  // Contains mathematical symbols\r\n            other: ''  // Unicode and uncaught characters\r\n        }\r\n    }\r\n\r\nThe charset size is the sum of the lengths of the different charsets that the password uses.  The higher this number, the harder it is to brute force attack.  That's precisely why password policies often say \"must contain one lowercase letter, one uppercase letter, one number and a symbol\".\r\n\r\nThe strength code is based on the trigraph entropy bits when they are available and will fall back to the Shannon entropy bits.  It's one of five values:  `VERY_WEAK`, `WEAK`, `REASONABLE`, `STRONG`, and `VERY_STRONG`.\r\n\r\nTrigraph entropy bits is discussed more [here](data/README.md).\r\n\r\nThe charsets is mostly an object that has boolean values, except the `other` property.  That one is a catch-all string of the letters that were not caught and tallied into another one of the charset lists.  The list of characters in `other` is deduplicated.\r\n\r\n\r\n### Browser\r\n\r\nInclude `lib/password-strength.js` in your project.\r\n\r\n    <script src=\"path/to/password-strength.js\" />\r\n\r\nNext you will want to instantiate the modules and make some AJAX calls to fetch additional data and make the password strength tester more accurate and informative.  This bit of code uses jQuery, but similar code can be written for any framework.\r\n\r\n    $(function () {\r\n        // Create the instance that can be used immediately for strength tests\r\n        window.passwordStrength = new PasswordStrength();\r\n        \r\n        // Add additional files that improve the results\r\n        $.getJSON(\"path/to/data/common-passwords.json\", function (data) {\r\n            window.passwordStrength.addCommonPasswords(data);\r\n        });\r\n        $.getJSON(\"path/to/data/trigraphs.json\", function (data) {\r\n            window.passwordStrength.addCommonPasswords(data);\r\n        });\r\n    });\r\n    \r\nLater, to calculate the strength of a password you would use something like this:\r\n\r\n    if (window.passwordStrength) {\r\n        strength = window.passwordStrength.check(\"abcd1234\");\r\n        \r\n        if (strength.strengthCode.indexOf('WEAK') >= 0) {\r\n            alert(\"Your password is too weak.\");\r\n        }\r\n    }\r\n    \r\n\r\n### Node.js\r\n\r\nFirst run `npm install --save tai-password-strength` and then your code would look a bit like this:\r\n\r\n    var taiPasswordStrength = require(\"tai-password-strength\")\r\n    var strengthTester = new taiPasswordStrength.PasswordStrength();\r\n    var results = strengthTester.check(\"abcd1234\");\r\n    \r\n    // Add in extra files for additional checks and better results\r\n    strengthTester.addCommonPasswords(taiPasswordStrength.commonPasswords);\r\n    strengthTester.addTrigraphMap(taiPasswordStrength.trigraphs);\r\n    var betterResults = strengthTester.check(\"abcd1234\");\r\n    \r\n    if (betterResults.strengthCode.indexOf('WEAK') >= 0) {\r\n        throw new Error(\"Your password is too weak\");\r\n    }\r\n\r\n\r\n[fid-umd]: https://github.com/fidian/fid-umd",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}